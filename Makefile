# This is a generic makefile (works only on Linux operating system).
# It finds all files with extension .c inside src/ folder and compiles
# them into object files with extension .o and saves them in the folder
# release/.obj. At the same time, dependency files .d are saved in the
# release/.deps folder. These files are generated by the compiler and
# contain information about the header files .h that are included directly
# and indirectly by the .c file in question. On the next call to make, it
# will check if there has been any change in the .c file or in its
# dependency files and if so, it will compile the corresponding object
# file again. After all object files are generated, the linker will merge
# them all into an executable file (with the same name as the project
# folder). This approach allows any level of subfolders in the src/ folder.
# If any .c files are created inside the src/ folder, make will detect it
# automatically and include them in the compilation list. If any .c file
# is excluded, its corresponding object file .o will not be excluded, but
# it will not be included in the linker's list either, without causing
# major problems. If we modify this makefile, the whole project will be
# recompiled when we call make again.

# ----------------------------------------
# Project definitions
# ----------------------------------------

# Name of the project (same as the basename of the current directory)
PROJECT       := $(shell basename $(CURDIR))

# Folders
RELEASE_DIR   := release
DEBUG_DIR     := debug
ODIR          := .obj
DDIR          := .deps
SDIR          := src

# ----------------------------------------
# Compiler and linker definitions
# ----------------------------------------

# Compiler, linker and debugger
ifndef CC
	CC        := gcc
endif
DEBUGGER      := gdb

# Flags for compiler
COMMON_FLAGS  := -W -Wall -Wextra -pedantic -Wconversion -Wswitch-enum -Werror -flto -std=c11
RELEASE_FLAGS := -O2
DEBUG_FLAGS   := -O0 -g -DDEBUG
LINK_FLAGS    := -flto

# Libraries
LIBS          := -lm

# ----------------------------------------
# Project macros and functions
# ----------------------------------------

# Recursive wildcard
# Based on: https://stackoverflow.com/questions/2483182/recursive-wildcards-in-gnu-make
rwildcard     = $(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

# Git version
# Based on: https://stackoverflow.com/questions/1704907/how-can-i-get-my-c-code-to-automatically-print-out-its-git-version-hash
GIT_VERSION   := "$(shell git describe --always --dirty --tags)"

# Create a directory
ifndef MKDIR_P
	MKDIR_P   := mkdir -p
endif

# Delete a directory
ifndef RM
	RM        := rm -f
endif

# Path separator (depends on the operating system used)
ifeq ($(OS),Windows_NT)
	PATH_SEP  := $(shell echo \)
else
	PATH_SEP  := /
endif

# Name of the executable
RELEASE_EXEC  := $(addprefix $(RELEASE_DIR)$(PATH_SEP), $(PROJECT))
DEBUG_EXEC    := $(addprefix $(DEBUG_DIR)$(PATH_SEP), $(PROJECT))

# Source files
ifeq ($(OS),Windows_NT)
	SRCS      := $(subst /,\,$(call rwildcard,$(SDIR),*.c))
else
	SRCS      := $(call rwildcard,$(SDIR),*.c)
endif

# Dependency files (auto generated)
DEPS          := $(patsubst %,%.d,$(basename $(subst $(SDIR),$(DDIR),$(SRCS))))
RELEASE_DEPS  := $(addprefix $(RELEASE_DIR)$(PATH_SEP), $(DEPS))
DEBUG_DEPS    := $(addprefix $(DEBUG_DIR)$(PATH_SEP), $(DEPS))

# Object files
OBJS          := $(patsubst %,%.o,$(basename $(subst $(SDIR),$(ODIR),$(SRCS))))
RELEASE_OBJS  := $(addprefix $(RELEASE_DIR)$(PATH_SEP), $(OBJS))
DEBUG_OBJS    := $(addprefix $(DEBUG_DIR)$(PATH_SEP), $(OBJS))

# Output directories
RELEASE_ODIR  := $(addprefix $(RELEASE_DIR)$(PATH_SEP), $(ODIR))
DEBUG_ODIR    := $(addprefix $(DEBUG_DIR)$(PATH_SEP), $(ODIR))
RELEASE_ODIRS := $(sort $(dir $(RELEASE_OBJS)))
DEBUG_ODIRS   := $(sort $(dir $(DEBUG_OBJS)))

# Dependency directories
RELEASE_DDIR  := $(addprefix $(RELEASE_DIR)$(PATH_SEP), $(DDIR))
DEBUG_DDIR    := $(addprefix $(DEBUG_DIR)$(PATH_SEP), $(DDIR))
RELEASE_DDIRS := $(sort $(dir $(RELEASE_DEPS)))
DEBUG_DDIRS   := $(sort $(dir $(DEBUG_DEPS)))

# Flags for compiler
REL_CFLAGS    := $(COMMON_FLAGS) $(RELEASE_FLAGS)
DEB_CFLAGS    := $(COMMON_FLAGS) $(DEBUG_FLAGS)
LINK_CFLAGS   := $(LINK_FLAGS) $(LIBS)

# ----------------------------------------
# Formating macros
# ----------------------------------------

BOLD          := \033[1m
NORMAL        := \033[0m
RED           := \033[0;31m
GREEN         := \033[0;32m

# ----------------------------------------
# Compilation and linking rules
# ----------------------------------------

all: release

release: $(RELEASE_EXEC)

$(RELEASE_EXEC): $(RELEASE_OBJS)
	@ echo "${GREEN}Building binary ${BOLD}$@${GREEN} using dependencies ${BOLD}$^${NORMAL}"
	$(CC) $(filter %.s %.o,$^) -o $@ $(LINK_CFLAGS)
	@ touch $@

$(RELEASE_ODIR)$(PATH_SEP)%.o: $(SDIR)$(PATH_SEP)%.c Makefile
$(RELEASE_ODIR)$(PATH_SEP)%.o: $(SDIR)$(PATH_SEP)%.c $(RELEASE_DDIR)$(PATH_SEP)%.d Makefile | $(RELEASE_DDIRS) $(RELEASE_ODIRS)
	@ echo "${GREEN}Building target ${BOLD}$@${GREEN}, using dependencies ${BOLD}$^${NORMAL}"
	$(CC) $(REL_CFLAGS) -MT $@ -MMD -MP -MF $(patsubst %,%.Td,$(basename $(subst $(RELEASE_ODIR),$(RELEASE_DDIR),$@))) -c $(filter %.c %.s %.o,$^) -o $@
	@ mv -f $(patsubst %,%.Td,$(basename $(subst $(RELEASE_ODIR),$(RELEASE_DDIR),$@))) $(patsubst %,%.d,$(basename $(subst $(RELEASE_ODIR),$(RELEASE_DDIR),$@))) && touch $@

debug: $(DEBUG_EXEC)

$(DEBUG_EXEC): $(DEBUG_OBJS)
	@ echo "${GREEN}Building binary ${BOLD}$@${GREEN} using dependencies ${BOLD}$^${NORMAL}"
	$(CC) $(filter %.s %.o,$^) -o $@ $(LINK_CFLAGS)
	@ touch $@

$(DEBUG_ODIR)$(PATH_SEP)%.o: $(SDIR)$(PATH_SEP)%.c Makefile
$(DEBUG_ODIR)$(PATH_SEP)%.o: $(SDIR)$(PATH_SEP)%.c $(DEBUG_DDIR)$(PATH_SEP)%.d Makefile | $(DEBUG_DDIRS) $(DEBUG_ODIRS)
	@ echo "${GREEN}Building target ${BOLD}$@${GREEN}, using dependencies ${BOLD}$^${NORMAL}"
	$(CC) $(DEB_CFLAGS) -MT $@ -MMD -MP -MF $(patsubst %,%.Td,$(basename $(subst $(DEBUG_ODIR),$(DEBUG_DDIR),$@))) -c $(filter %.c %.s %.o,$^) -o $@
	@ mv -f $(patsubst %,%.Td,$(basename $(subst $(DEBUG_ODIR),$(DEBUG_DDIR),$@))) $(patsubst %,%.d,$(basename $(subst $(DEBUG_ODIR),$(DEBUG_DDIR),$@))) && touch $@

# ----------------------------------------
# Automatic dependency generation rules
# ----------------------------------------

# Based on http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
# https://gist.github.com/maxtruxa/4b3929e118914ccef057f8a05c614b0f
# https://spin.atomicobject.com/2016/08/26/makefile-c-projects/

$(RELEASE_DEPS): ;
.PRECIOUS: $(RELEASE_DEPS)

-include $(RELEASE_DEPS)

$(DEBUG_DEPS): ;
.PRECIOUS: $(DEBUG_DEPS)

-include $(DEBUG_DEPS)

# ----------------------------------------
# Script rules
# ----------------------------------------

$(RELEASE_ODIRS) $(DEBUG_ODIRS) $(RELEASE_DDIRS) $(DEBUG_DDIRS):
	@ echo "${GREEN}Creating directory ${BOLD}$@${NORMAL}"
	$(MKDIR_P) $@

run: release
	@ echo "${GREEN}Running the aplication:${NORMAL}"
	$(RELEASE_EXEC)

memcheck: release
	valgrind --tool=memcheck --track-origins=yes --leak-check=full ./$(RELEASE_EXEC)

debugger: debug
	@ echo "${GREEN}Running the aplication with the debugger${NORMAL}"
	$(DEBUGGER) $(DEBUG_EXEC)

log:
	@ echo "${GREEN}Git project log:${NORMAL}"
	git log --oneline --decorate --all --graph

clean:
	$(RM) -r $(RELEASE_DIR) $(DEBUG_DIR) *.d *.o *.a *.so *.exe

remade: clean release

.PHONY: all release debug run memcheck debugger log clean remade

# ----------------------------------------
